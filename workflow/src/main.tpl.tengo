wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

pfUMAPConv := import(":pf-umap-conv")
pfTSNEConv := import(":pf-tsne-conv")
pfPCAConv := import(":pf-pca-conv")
wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec

	nPCs := args.nPCs
	nNeighbors := args.nNeighbors

	csvCounts := xsv.exportFrame([rawCounts], "csv", {})

	dimReduction := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.dimensionality-reduction.software:calculate-dimRed")).
		addFile("rawCounts.csv", csvCounts).
		arg("--file_path").arg("rawCounts.csv").
		arg("--output_dir").arg(".").
		arg("--n_pcs").arg(string(nPCs)).
		arg("--n_neighbors").arg(string(nNeighbors)).
		saveFile("umap_results.csv").
		saveFile("tsne_results.csv").
		saveFile("pca_results.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	UMAPDimImportParams := pfUMAPConv.getColumns(blockId, inputSpec)
	UMAPPf := xsv.importFile(dimReduction.getFile("umap_results.csv"), "csv", UMAPDimImportParams, {splitDataAndSpec: true})

	tSNEDimImportParams := pfTSNEConv.getColumns(blockId, inputSpec)
	tSNEPf := xsv.importFile(dimReduction.getFile("tsne_results.csv"), "csv", tSNEDimImportParams, {splitDataAndSpec: true})

	PCADimImportParams := pfPCAConv.getColumns(blockId, inputSpec)
	PCAPf := xsv.importFile(dimReduction.getFile("pca_results.csv"), "csv", PCADimImportParams, {splitDataAndSpec: true})

	// Make trace with informative label
	traceLabel := "Dimensionality Reduction (nPCs:" + string(nPCs) + ", nNeighbors:" + string(nNeighbors) + ")"
	
	// Make trace
	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.dimensionality-reduction", id: blockId, importance: 70, label: traceLabel}
	)

	// Build UMAP pFrame for outputs
	umapOutputPf := pframes.pFrameBuilder()
	for k, v in UMAPPf {
		umapOutputPf.add(k, trace.inject(v.spec), v.data)
	}
	umapOutputPf = umapOutputPf.build()

	// Build tSNE pFrame for outputs
	tsneOutputPf := pframes.pFrameBuilder()
	for k, v in tSNEPf {
		tsneOutputPf.add(k, trace.inject(v.spec), v.data)
	}
	tsneOutputPf = tsneOutputPf.build()

	// Build combined exports pFrame
	exportsPf := pframes.pFrameBuilder()
	i := 0
	
	for pf in [UMAPPf, tSNEPf, PCAPf] {
		for k, v in pf {
			exportsPf.add(string(i) + "_" + k, trace.inject(v.spec), v.data)
			i = i + 1
		}
	}
	
	exportsPf = exportsPf.build()

	return {
		outputs: {
			UMAPPf: pframes.exportFrame(umapOutputPf),
			tSNEPf: pframes.exportFrame(tsneOutputPf)
		},
		exports: {
			pf: exportsPf
		}
	}
})

