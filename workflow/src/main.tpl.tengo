wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

pfUMAPConv := import(":pf-umap-conv")
pfTSNEConv := import(":pf-tsne-conv")
pfPCAConv := import(":pf-pca-conv")
wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec

	nPCs := args.nPCs
	nNeighbors := args.nNeighbors

	csvCounts := xsv.exportFrame([rawCounts], "csv", {})

	dimReduction := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.dimensionality-reduction.software:calculate-dimRed")).
		addFile("rawCounts.csv", csvCounts).
		arg("--file_path").arg("rawCounts.csv").
		arg("--output_dir").arg(".").
		arg("--n_pcs").arg(string(nPCs)).
		arg("--n_neighbors").arg(string(nNeighbors)).
		saveFile("umap_results.csv").
		saveFile("tsne_results.csv").
		saveFile("pca_results.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	UMAPDimImportParams := pfUMAPConv.getColumns(blockId, inputSpec)
	UMAPPf := xsv.importFile(dimReduction.getFile("umap_results.csv"), "csv", UMAPDimImportParams)

	tSNEDimImportParams := pfTSNEConv.getColumns(blockId, inputSpec)
	tSNEPf := xsv.importFile(dimReduction.getFile("tsne_results.csv"), "csv", tSNEDimImportParams)

	PCADimImportParams := pfPCAConv.getColumns(blockId, inputSpec)
	PCAPf := xsv.importFile(dimReduction.getFile("pca_results.csv"), "csv", PCADimImportParams)

	dimReductionLog := dimReduction.getStdoutStream()

	// Prepare exports
	exports := {
        UMAP1: {
            spec: UMAPPf["umap1.spec"],
            data: UMAPPf["umap1.data"]
            },
		UMAP2: {
            spec: UMAPPf["umap2.spec"],
            data: UMAPPf["umap2.data"]
            },
		UMAP3: {
            spec: UMAPPf["umap3.spec"],
            data: UMAPPf["umap3.data"]
            },
        tSNE1 : {
            spec: tSNEPf["tsne1.spec"],
            data: tSNEPf["tsne1.data"]
            },
		tSNE2 : {
            spec: tSNEPf["tsne2.spec"],
            data: tSNEPf["tsne2.data"]
            },
		// tSNE3 : {
        //     spec: tSNEPf["tsne3.spec"],
        //     data: tSNEPf["tsne3.data"]
        //     },
		PCembeddings: {
		 	spec: PCAPf["pcvalue.spec"],
			data: PCAPf["pcvalue.data"]
		 	}
    }

	return {
		outputs: {
			UMAPPf: pframes.exportFrame(UMAPPf),
			tSNEPf: pframes.exportFrame(tSNEPf),
			dimReductionLog: dimReductionLog
		},
		exports: exports
	}
})

